/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
/* Header for class net_sf_geographiclib_Geodesic */

#ifndef _Included_net_sf_geographiclib_Geodesic
#define _Included_net_sf_geographiclib_Geodesic
#ifdef __cplusplus
extern "C" {
#endif
#undef net_sf_geographiclib_Geodesic_CAP_NONE
#define net_sf_geographiclib_Geodesic_CAP_NONE 0LL
#undef net_sf_geographiclib_Geodesic_CAP_C1
#define net_sf_geographiclib_Geodesic_CAP_C1 1LL
#undef net_sf_geographiclib_Geodesic_CAP_C1p
#define net_sf_geographiclib_Geodesic_CAP_C1p 2LL
#undef net_sf_geographiclib_Geodesic_CAP_C2
#define net_sf_geographiclib_Geodesic_CAP_C2 4LL
#undef net_sf_geographiclib_Geodesic_CAP_C3
#define net_sf_geographiclib_Geodesic_CAP_C3 8LL
#undef net_sf_geographiclib_Geodesic_CAP_C4
#define net_sf_geographiclib_Geodesic_CAP_C4 16LL
#undef net_sf_geographiclib_Geodesic_CAP_ALL
#define net_sf_geographiclib_Geodesic_CAP_ALL 31LL
#undef net_sf_geographiclib_Geodesic_OUT_ALL
#define net_sf_geographiclib_Geodesic_OUT_ALL 32640LL
#undef net_sf_geographiclib_Geodesic_MASK_NONE
#define net_sf_geographiclib_Geodesic_MASK_NONE 0LL
#undef net_sf_geographiclib_Geodesic_MASK_LATITUDE
#define net_sf_geographiclib_Geodesic_MASK_LATITUDE 128LL
#undef net_sf_geographiclib_Geodesic_MASK_LONGITUDE
#define net_sf_geographiclib_Geodesic_MASK_LONGITUDE 264LL
#undef net_sf_geographiclib_Geodesic_MASK_AZIMUTH
#define net_sf_geographiclib_Geodesic_MASK_AZIMUTH 512LL
#undef net_sf_geographiclib_Geodesic_MASK_DISTANCE
#define net_sf_geographiclib_Geodesic_MASK_DISTANCE 1025LL
#undef net_sf_geographiclib_Geodesic_MASK_DISTANCE_IN
#define net_sf_geographiclib_Geodesic_MASK_DISTANCE_IN 2051LL
#undef net_sf_geographiclib_Geodesic_MASK_REDUCEDLENGTH
#define net_sf_geographiclib_Geodesic_MASK_REDUCEDLENGTH 4101LL
#undef net_sf_geographiclib_Geodesic_MASK_GEODESICSCALE
#define net_sf_geographiclib_Geodesic_MASK_GEODESICSCALE 8197LL
#undef net_sf_geographiclib_Geodesic_MASK_AREA
#define net_sf_geographiclib_Geodesic_MASK_AREA 16400LL
#undef net_sf_geographiclib_Geodesic_MASK_ALL
#define net_sf_geographiclib_Geodesic_MASK_ALL 32671LL
/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    newGeodesicCppObject
 * Signature: (DD)J
 */
JNIEXPORT jlong JNICALL Java_net_sf_geographiclib_Geodesic_newGeodesicCppObject
  (JNIEnv *, jclass, jdouble, jdouble);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    deleteGeodesicCppObject
 * Signature: (J)V
 */
JNIEXPORT void JNICALL Java_net_sf_geographiclib_Geodesic_deleteGeodesicCppObject
  (JNIEnv *, jclass, jlong);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    newGeodesicWgs84Object
 * Signature: ()Lnet/sf/geographiclib/Geodesic;
 */
JNIEXPORT jobject JNICALL Java_net_sf_geographiclib_Geodesic_newGeodesicWgs84Object
  (JNIEnv *, jclass);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeDirect
 * Signature: (Lnet/sf/geographiclib/Geodesic;JDDDD)Lnet/sf/geographiclib/Geodesic/DirectResult;
 */
JNIEXPORT jobject JNICALL Java_net_sf_geographiclib_Geodesic_nativeDirect
  (JNIEnv *, jclass, jobject, jlong, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeArcDirect
 * Signature: (Lnet/sf/geographiclib/Geodesic;JDDDD)Lnet/sf/geographiclib/Geodesic/DirectResult;
 */
JNIEXPORT jobject JNICALL Java_net_sf_geographiclib_Geodesic_nativeArcDirect
  (JNIEnv *, jclass, jobject, jlong, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeGenDirect
 * Signature: (Lnet/sf/geographiclib/Geodesic;JDDDZDJ)Lnet/sf/geographiclib/Geodesic/DirectResult;
 */
JNIEXPORT jobject JNICALL Java_net_sf_geographiclib_Geodesic_nativeGenDirect
  (JNIEnv *, jclass, jobject, jlong, jdouble, jdouble, jdouble, jboolean, jdouble, jlong);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeInverse
 * Signature: (Lnet/sf/geographiclib/Geodesic;JDDDD)Lnet/sf/geographiclib/Geodesic/InverseResult;
 */
JNIEXPORT jobject JNICALL Java_net_sf_geographiclib_Geodesic_nativeInverse
  (JNIEnv *, jclass, jobject, jlong, jdouble, jdouble, jdouble, jdouble);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeGenInverse
 * Signature: (Lnet/sf/geographiclib/Geodesic;JDDDDJ)Lnet/sf/geographiclib/Geodesic/InverseResult;
 */
JNIEXPORT jobject JNICALL Java_net_sf_geographiclib_Geodesic_nativeGenInverse
  (JNIEnv *, jclass, jobject, jlong, jdouble, jdouble, jdouble, jdouble, jlong);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeMajorRadius
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_net_sf_geographiclib_Geodesic_nativeMajorRadius
  (JNIEnv *, jclass, jlong);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeFlattening
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_net_sf_geographiclib_Geodesic_nativeFlattening
  (JNIEnv *, jclass, jlong);

/*
 * Class:     net_sf_geographiclib_Geodesic
 * Method:    nativeEllipsoidArea
 * Signature: (J)D
 */
JNIEXPORT jdouble JNICALL Java_net_sf_geographiclib_Geodesic_nativeEllipsoidArea
  (JNIEnv *, jclass, jlong);

#ifdef __cplusplus
}
#endif
#endif
